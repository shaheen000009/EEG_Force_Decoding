// ========================  Dual EMG + Force @500 Hz  ========================
//  Hardware:
//    • BioAmp EXG Pill  → Arduino A0 (EMG signal)
//    • Load cell        → ADS1115 diff inputs A0(+) / A1(–)
//    • ADS1115 address 0x48 on I²C bus
//
//  Force calibration:
//      Force_N = 36.88 * raw_value – 1796.2
//
//  Serial output (CSV, one line per sample):
//      EMG_filt , Force
//


#include <Wire.h>
#include <Adafruit_ADS1X15.h>

// ---------------------------  User settings  ----------------------------
#define SAMPLE_RATE   500          // Hz
#define BAUD_RATE     230400       
#define EMG_PIN       A0           // analog pin for BioAmp EXG Pill

// ---------------------------  Global objects  ---------------------------
Adafruit_ADS1115 ads;

// ------------------------------  Setup  ----------------------------------
void setup() {
  Serial.begin(BAUD_RATE);

  if (!ads.begin(0x48)) {                      // ADS1115 address pin tied to GND
    Serial.println("ADS1115 init failed");
  } else {
    Serial.println("ADS1115 initialized");
  }

  ads.setGain(GAIN_SIXTEEN);                   // ±0.256 V, 7.8125 µV/LSB
  ads.setDataRate(RATE_ADS1115_860SPS);        // fastest ADS1115 setting

  Serial.println("EMG_filt,Force");            // CSV header
}

// ------------------------------  Loop  -----------------------------------
void loop() {
  static unsigned long tPrev = micros();
  unsigned long tNow = micros();
  long delta = tNow - tPrev;
  tPrev = tNow;

  static long chrono = 0;
  chrono -= delta;

  if (chrono < 0) {                            // time to take a sample
    chrono += 1'000'000L / SAMPLE_RATE;        // keep 500 Hz cadence

    // --------  EMG acquisition & filtering  --------
    float emg_raw   = analogRead(EMG_PIN);     // 0-1023 from Arduino ADC
    float emg_filt  = EMGFilter(emg_raw);

    // --------  Force acquisition  --------
    int16_t adc_raw = ads.readADC_Differential_0_1();
    float   force_N = 36.88f * adc_raw - 1796.2f;

    // --------  Real-time CSV output  --------
    Serial.print(emg_filt, 3);                 // 3 decimal places
    Serial.print(',');
    Serial.println(force_N, 2);                // 2 decimal places
  }
}

// --------------------  4th-order Butterworth BP  -------------------------
float EMGFilter(float x) {
  float y = x;
  { static float z1, z2; float t = y - 0.05159732*z1 - 0.36347401*z2;
    y = 0.01856301*t + 0.03712602*z1 + 0.01856301*z2; z2 = z1; z1 = t; }
  { static float z1, z2; float t = y + 0.53945795*z1 - 0.39764934*z2;
    y = 1.0f*t - 2.0f*z1 + 1.0f*z2;             z2 = z1; z1 = t; }
  { static float z1, z2; float t = y - 0.47319594*z1 - 0.70744137*z2;
    y = 1.0f*t + 2.0f*z1 + 1.0f*z2;             z2 = z1; z1 = t; }
  { static float z1, z2; float t = y + 1.00211112*z1 - 0.74520226*z2;
    y = 1.0f*t - 2.0f*z1 + 1.0f*z2;             z2 = z1; z1 = t; }
  return y;
}
